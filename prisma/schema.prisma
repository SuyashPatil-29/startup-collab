// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Base authentication models

model User {
  id            String        @id
  name          String
  email         String
  emailVerified Boolean
  image         String?
  createdAt     DateTime
  updatedAt     DateTime
  sessions      Session[]
  accounts      Account[]
  // Extended relations
  profile       Profile?
  foundedIdeas  Idea[]        @relation("FounderIdeas")
  applications  Application[] @relation("DeveloperApplications")

  isFounder Boolean @default(false)

  @@unique([email])
  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

// New models for the platform

model Profile {
  id              String   @id @default(cuid())
  userId          String   @unique
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  bio             String?  @db.Text
  skills          String[] // Array of skills
  experience      String?  @db.Text
  githubProfile   String?
  linkedinProfile String?
  phoneNumber     String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model Idea {
  id           String        @id @default(cuid())
  title        String
  description  String        @db.Text
  founderId    String
  founder      User          @relation("FounderIdeas", fields: [founderId], references: [id])
  equity       Float // Percentage of equity offered
  salary       Float? // Optional monthly/yearly salary
  requirements String        @db.Text
  status       IdeaStatus    @default(OPEN)
  applications Application[]
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  tags         String[] // Array of technology tags/requirements
}

model Application {
  id          String            @id @default(cuid())
  ideaId      String
  idea        Idea              @relation(fields: [ideaId], references: [id])
  developerId String
  developer   User              @relation("DeveloperApplications", fields: [developerId], references: [id])
  proposal    String            @db.Text
  status      ApplicationStatus @default(PENDING)
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
}

enum IdeaStatus {
  OPEN
  IN_PROGRESS
  CLOSED
}

enum ApplicationStatus {
  PENDING
  ACCEPTED
  REJECTED
  WITHDRAWN
}
